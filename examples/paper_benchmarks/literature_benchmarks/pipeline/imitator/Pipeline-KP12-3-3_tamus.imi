(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Producer/Consumer with n=3 processing nodes of length m=3
 *
 * Description     : The network presented in Figure 2 models the system consisting of the Producer feeding the Consumer with data sent through a sequence of nodes with additional processing capabilities. The model is scalable with respect to the number n of the processing nodes and the length m of each processing node and it contains three lower (a,c,e) and three upper (b,d,f) parameters. Note: the clocks were renamed (w.r.t. to [KP12]) for sake of simplicity.
	WARNING: the first of the valuations in [KP12] does not match the result of IMITATOR!
 * Correctness     : φ2 = ConsWaiting ∧ ProdReady ∧ xtotal ≥ 5
 * Source          : SMT-based Parameter Synthesis for L/U Automata, Michał Knapik and Wojciech Penczek
 * Author          : Michał Knapik and Wojciech Penczek
 * Modeling        : Michał Knapik and Wojciech Penczek
 * Input by        : Étienne André
 *
 * Created         : 2015/09/23
 * Last modified   : 2018/08/20
 *
 * IMITATOR version: 2.10.4
 ************************************************************)

var

(* Clocks *)
 	xprod, xnode1, xnode2, xnode3, xcons,
		xtotal,
		: clock;

(* Parameters *)
	a, b, c, d, e, f,
	(* Below are the valuations explicitly given in [KP12] *)
(* 	a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, *)
(* 	a = 1, b = 1, c = 0, d = 1, e = 0, f = 1, *)
(* 	a = 2, b = 2, c = 0, d = 2, e = 0, f = 2, *)
(* 	a = 3, b = 3, c = 0, d = 3, e = 0, f = 3, *)
(* 	a = 4, b = 4, c = 0, d = 4, e = 0, f = 4, *)
(* 	a = 5, b = 5, c = 0, d = 5, e = 0, f = 5, *)
(* 	a = 6, b = 6, c = 0, d = 6, e = 0, f = 6, *)
(* 	a = 7, b = 7, c = 0, d = 7, e = 0, f = 7, *)
(* 	a = 8, b = 8, c = 0, d = 8, e = 0, f = 8, *)
(* 	a = 9, b = 9, c = 0, d = 9, e = 0, f = 9, *)
	p0,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	p9,
	p10,
	p11,
	p12,
	p13,
	p14,
	p15,
	p16,
	p17,
	p18,
	p19,
	p20,
	p21,
	p22,
	p23,
	p24,
	p25,
	p26,
	p27,
	p28,
	p29,
	p30,
	p31,
	p32,
	p33,
	p34,	
	p35,
	p36,
	p37,
	p38,
	p39,
	p40
		: parameter;




(************************************************************)
automaton Producer
(************************************************************)
synclabs : ProdReset, Feed2;

loc Producer_prodWaiting: invariant xprod <= 9 + p1
	when  xprod >= 11 - p3  sync ProdReset do {xprod := 0} goto Producer_prodReady;

loc Producer_prodReady: invariant xprod <= 9 + p0
	when  xprod >= 0 - p2  sync Feed2 do {xprod := 0} goto Producer_prodWaiting;

end


(************************************************************)
automaton Consumer
(************************************************************)
synclabs : ConsReset, Feed5;

loc Consumer_consReady: invariant xcons <= 8 + p4
	when  xcons >= 0 - p6  sync Feed5 do {xcons := 0} goto Consumer_consWaiting;

loc Consumer_consWaiting: invariant xcons <= 9 + p5
	when  xcons >= 9 - p7  sync ConsReset do {xcons := 0} goto Consumer_consReady;

end


(************************************************************)
automaton Node1
(************************************************************)
synclabs : Node1Process1, Feed3, Node1Process3, Feed2, Node1Process2;

loc Node1_send: invariant xnode1 <= 8 + p12
	when  xnode1 >= 0 - p17  sync Feed3 do {xnode1 := 0} goto Node1_node1Ready;

loc Node1_node1Ready: invariant xnode1 <= 8 + p10
	when  xnode1 >= 0 - p13  sync Feed2 do {xnode1 := 0} goto Node1_intermediate1;

loc Node1_intermediate2: invariant xnode1 <= 8 + p8
	when  xnode1 >= 0 - p15  sync Node1Process2 do {xnode1 := 0} goto Node1_intermediate3;

loc Node1_intermediate3: invariant xnode1 <= 9 + p9
	when  xnode1 >= 0 - p16  sync Node1Process3 do {xnode1 := 0} goto Node1_send;

loc Node1_intermediate1: invariant xnode1 <= 8 + p11
	when  xnode1 >= 0 - p14  sync Node1Process1 do {xnode1 := 0} goto Node1_intermediate2;

end

(************************************************************)
automaton Node2
(************************************************************)
synclabs : Node2Process2, Node2Process3, Feed3, Node2Process1, Feed4;

loc Node2_send: invariant xnode2 <= 9 + p21
	when  xnode2 >= 0 - p27  sync Feed4 do {xnode2 := 0} goto Node2_node2Ready;

loc Node2_node2Ready: invariant xnode2 <= 8 + p22
	when  xnode2 >= 0 - p23  sync Feed3 do {xnode2 := 0} goto Node2_intermediate1;

loc Node2_intermediate1: invariant xnode2 <= 9 + p18
	when  xnode2 >= 0 - p24  sync Node2Process1 do {xnode2 := 0} goto Node2_intermediate2;

loc Node2_intermediate3: invariant xnode2 <= 9 + p20
	when  xnode2 >= 0 - p26  sync Node2Process3 do {xnode2 := 0} goto Node2_send;

loc Node2_intermediate2: invariant xnode2 <= 9 + p19
	when  xnode2 >= 0 - p25  sync Node2Process2 do {xnode2 := 0} goto Node2_intermediate3;

end


(************************************************************)
automaton Node3
(************************************************************)
synclabs : Feed4, Feed5, Node3Process3, Node3Process1, Node3Process2;

loc Node3_intermediate1: invariant xnode3 <= 8 + p30
	when  xnode3 >= 0 - p34  sync Node3Process1 do {xnode3 := 0} goto Node3_intermediate2;

loc Node3_intermediate2: invariant xnode3 <= 8 + p31
	when  xnode3 >= 0 - p35  sync Node3Process2 do {xnode3 := 0} goto Node3_intermediate3;

loc Node3_intermediate3: invariant xnode3 <= 8 + p32
	when  xnode3 >= 0 - p36  sync Node3Process3 do {xnode3 := 0} goto Node3_send;

loc Node3_node3Ready: invariant xnode3 <= 8 + p29
	when  xnode3 >= 0 - p33  sync Feed4 do {xnode3 := 0} goto Node3_intermediate1;

loc Node3_send: invariant xnode3 <= 8 + p28
	when  xnode3 >= 0 - p37  sync Feed5 do {xnode3 := 0} goto Node3_node3Ready;

end

(************************************************************)
automaton observer
(************************************************************)
(*** NOTE: as of version 2.10, IMITATOR cannot use clocks in the property; therefore we use an observer to encode the x >= 5 part of the property ***)
loc observer_finished: invariant True

loc observer_waiting: invariant xtotal <= 5 + p38
	when  xtotal <= 5 + p39 & xtotal >= 5 - p40  do {} goto observer_finished;

end

(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[Producer]	= Producer_prodReady
	& loc[Consumer]	= Consumer_consReady
	& loc[Node1]	= Node1_node1Ready
	& loc[Node2]	= Node2_node2Ready
	& loc[Node3]	= Node3_node3Ready
	& loc[observer]	= observer_waiting

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& xprod = 0
	& xnode1 = 0
	& xnode2 = 0
	& xnode3 = 0
	& xcons = 0
	& xtotal = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& a >= 0
	& b >= 0
	& c >= 0
	& d >= 0
	& e >= 0
	& f >= 0
	& p0 >= 0
	& p1 >= 0
	& p2 >= 0
	& p3 >= 0
	& p4 >= 0
	& p5 >= 0
	& p6 >= 0
	& p7 >= 0
	& p8 >= 0
	& p9 >= 0
	& p10 >= 0
	& p11 >= 0
	& p12 >= 0
	& p13 >= 0
	& p14 >= 0
	& p15 >= 0
	& p16 >= 0
	& p17 >= 0
	& p18 >= 0
	& p19 >= 0
	& p20 >= 0
	& p21 >= 0
	& p22 >= 0
	& p23 >= 0
	& p24 >= 0
	& p25 >= 0
	& p26 >= 0
	& p27 >= 0
	& p28 >= 0
	& p29 >= 0
	& p30 >= 0
	& p31 >= 0
	& p32 >= 0
	& p33 >= 0
	& p34 >= 0
	& p35 >= 0
	& p36 >= 0
	& p37 >= 0
	& p38 >= 0
	& p39 >= 0
	& p40 >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

(* φ2 = ConsWaiting ∧ ProdReady ∧ xtotal ≥ 5 *)
property := unreachable loc[Consumer] = Consumer_consWaiting & loc[Producer] = Producer_prodReady (*& xtotal >= 5*) & loc[observer] = observer_finished;


(************************************************************)
(* The end *)
(************************************************************)
end
