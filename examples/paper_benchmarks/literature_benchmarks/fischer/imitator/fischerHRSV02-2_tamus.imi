(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Fischer's mutual exclusion protocol
 *
 * Description     : Fischer's mutual exclusion protocol. Version with 2 processes.
 * Correctness     : No two processes in the mutual exclusion
 * Source          : From "Linear Parametric Model Checking of Timed Automata" Hune, Romijn, Stoelinga, Vaandrager, 2002
 * Author          : Hune, Romijn, Stoelinga, Vaandrager
 * Modeling        : Hune, Romijn, Stoelinga, Vaandrager
 * Input by        : Etienne Andre
 *
 * Created         : 2013/12/10
 * Last modified   : 2018/11/13
 *
 * IMITATOR version: 2.10.4
 ************************************************************)

var 
	
	x_1, (*P1's clock*)
	x_2, (*P2's clock*)
		:clock;
	

	lock
		: discrete;

	p0,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	p9,
	p10,
	p11,
	p12,
	p13,
	p14,
	p15
		: parameter;


(************************************************************)
automaton process_1
(************************************************************)
synclabs : ;
loc process_1_tryenter_1: invariant x_1 <= 4 + p0
	when lock > 1 & x_1 > 3 - p7  do {x_1 := 0} goto process_1_start_1;
	when lock < 1 & x_1 > 3 - p7  do {x_1 := 0} goto process_1_start_1;
	when lock = 1& x_1 > 3 - p6  do {} goto process_1_cs_1;
loc process_1_start_1: invariant x_1 <= 2 + p1
	when lock > 0 & x_1 > 1 - p3  do {x_1 := 0} goto process_1_start_1;
	when lock = 0& x_1 > 1 - p4  do {x_1 := 0} goto process_1_set_1;
loc process_1_set_1: invariant x_1 <= 2 + p2
	when  x_1 > 1 - p5  do {x_1 := 0, lock := 1} goto process_1_tryenter_1;
loc process_1_cs_1: invariant True
	when True do {x_1 := 0, lock := 0} goto process_1_start_1;
end

(************************************************************)
automaton process_2
(************************************************************)
synclabs : ;
loc process_2_start_2: invariant x_2 <= 2 + p9
	when lock = 0& x_2 > 1 - p12  do {x_2 := 0} goto process_2_set_2;
	when lock > 0 & x_2 > 1 - p11  do {x_2 := 0} goto process_2_start_2;
loc process_2_cs_2: invariant True
	when True do {x_2 := 0, lock := 0} goto process_2_start_2;
loc process_2_set_2: invariant x_2 <= 2 + p10
	when  x_2 > 1 - p13  do {x_2 := 0, lock := 2} goto process_2_tryenter_2;
loc process_2_tryenter_2: invariant x_2 <= 4 + p8
	when lock = 2& x_2 > 3 - p14  do {} goto process_2_cs_2;
	when lock > 2 & x_2 > 3 - p15  do {x_2 := 0} goto process_2_start_2;
	when lock < 2 & x_2 > 3 - p15  do {x_2 := 0} goto process_2_start_2;
end



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(*   INITIAL LOCATION *)
	(*------------------------------------------------------------*)
	& loc[process_1] = process_1_start_1
	& loc[process_2] = process_2_start_2
	
	(*------------------------------------------------------------*)
	(* Initial discrete assignments *)
	(*------------------------------------------------------------*)
	& lock = 0

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x_1 = 0
	& x_2 = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& p0 >= 0
	& p1 >= 0
	& p2 >= 0
	& p3 >= 0
	& p4 >= 0
	& p5 >= 0
	& p6 >= 0
	& p7 >= 0
	& p8 >= 0
	& p9 >= 0
	& p10 >= 0
	& p11 >= 0
	& p12 >= 0
	& p13 >= 0
	& p14 >= 0
	& p15 >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)
property := unreachable loc[process_1] = process_1_cs_1 & loc[process_2] = process_2_cs_2;


(************************************************************)
(* The end *)
(************************************************************)
end
