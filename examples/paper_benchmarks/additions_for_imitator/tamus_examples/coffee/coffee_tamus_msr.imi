(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Coffee machine
 *
 * Description     : Coffee machine (no coin, coffee is free!); a single button is used to wake the machine up, and to add sugar. Then a cup, and coffee are delivered after a (parametric) time.
 * Correctness     : Many possibilities (e.g., "it is possible to get a coffee")
 * Source          : Own work
 * Author          : Étienne André
 * Input by        : Étienne André
 *
 * Created         : 2011/01/21
 * Last modified   : 2018/11/13
 *
 * IMITATOR version: 2.10.4
 ************************************************************)

var

(* Clocks *)
 	x, y
		: clock;

(* Parameters *)
	p0,
	p1
		: parameter;



(************************************************************)
automaton Machine
(************************************************************)
synclabs : press, cup, coffee, sleep;
loc Machine_idle: invariant True
	when True sync press do {x := 0, y := 0} goto Machine_add_sugar;
loc Machine_cdone: invariant x <= 10
	when  x <= 10 & x >= 10 sync sleep do {} goto Machine_idle;
	when True sync press do {x := 0, y := 0} goto Machine_add_sugar;
loc Machine_preparing_coffee: invariant y <= 8
	when  y <= 2 +p0 & y>=8 sync coffee do {x := 0} goto Machine_cdone;
loc Machine_add_sugar: invariant y <= 5
	when  x >= 1  sync press do {x := 0} goto Machine_add_sugar;
	when  y <= 1 & y>= 9-p1  sync cup do {} goto Machine_preparing_coffee;


end (* machine *)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[Machine] = Machine_idle

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& p0 >= 0
	& p1 >= 0
;





(************************************************************)
(* The end *)
(************************************************************)
end
