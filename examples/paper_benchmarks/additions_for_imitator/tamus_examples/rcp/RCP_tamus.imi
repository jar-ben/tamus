(************************************************************
 *                      IMITATOR MODEL                      
 *
 * IEEE 1394 Root Contention Protocol
 *
 * Description     : IEEE 1394 Root Contention Protocol
 * Correctness     : ?
 * Source          : unknown source
 * Author          : ?
 * Modeling        : ?
 * Input by        : ?? (< 2007) and Etienne Andre
 *
 * Created         : 2008/01/10
 * Last modified   : 2015/07/31
 *
 * IMITATOR version: 2.7.2
 ************************************************************)


var 	ckN1, ckN2, ckW12x, ckW12y, ckW21x, ckW21y
		: clock;

(*	rc_fast_min, rc_fast_max,
	rc_slow_min, rc_slow_max,
	delay
			: parameter;*)

	rc_fast_min (*= 76*), rc_fast_max (*= 85*),
	rc_slow_min, rc_slow_max (*= 167*),
	delay,
	p0,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	p9,
	p10,
	p11,
	p12,
	p13,
	p14,
	p15,
	p16,
	p17,
	p18,
	p19,
	p20,
	p21,
	p22,
	p23,
	p24,
	p25,
	p26,
	p27,
	p28,
	p29,
	p30,
	p31,
	p32,
	p33,
	p34,
	p35,
	p36,
	p37,
	p38,
	p39,
	p40,
	p41,
	p42,
	p43,
	p44,
	p45,
	p46,
	p47
			: parameter;


(************************************************************)
automaton node1
(************************************************************)
synclabs : snd_idle12, snd_ack12, rec_req21, root1, child1, snd_req12, rec_idle21, rec_ack21;

loc node1_N1rec_idle: invariant ckN1 <= 0 + p5
	when True sync snd_idle12 do {ckN1 := 0} goto node1_N1rec_idle_fast;
	when True sync rec_req21 do {ckN1 := 0} goto node1_N1root_contention;
	when True sync snd_idle12 do {ckN1 := 0} goto node1_N1rec_idle_slow;

loc node1_N1rec_req_slow: invariant ckN1 <= 34 + p6
	when True sync rec_idle21 do {} goto node1_N1rec_idle_slow;
	when  ckN1 >= 159 - p12  sync snd_ack12 do {ckN1 := 0} goto node1_N1almost_root;

loc node1_N1rec_idle_slow: invariant ckN1 <= 167 + p3
	when  ckN1 >= 287 - p14  sync snd_req12 do {} goto node1_N1snt_req;
	when True sync rec_req21 do {} goto node1_N1rec_req_slow;

loc node1_N1root_contention: invariant ckN1 <= 0 + p8
	when True sync rec_idle21 do {ckN1 := 0} goto node1_N1rec_idle;
	when True sync snd_idle12 do {ckN1 := 0} goto node1_N1rec_req_slow;
	when True sync snd_idle12 do {ckN1 := 0} goto node1_N1rec_req_fast;

loc node1_N1rec_req_fast: invariant ckN1 <= 85 + p9
	when True sync rec_idle21 do {} goto node1_N1rec_idle_fast;
	when  ckN1 >= 137 - p11  sync snd_ack12 do {ckN1 := 0} goto node1_N1almost_root;

loc node1_N1almost_child: invariant ckN1 <= 0 + p1
	when True sync child1 do {} goto node1_N1child;

loc node1_N1snt_req: invariant ckN1 >= 0 - p0
	when True sync rec_ack21 do {ckN1 := 0} goto node1_N1almost_child;
	when True sync rec_req21 do {ckN1 := 0} goto node1_N1root_contention;

loc node1_N1root: invariant ckN1 >= 0 - p4

loc node1_N1rec_idle_fast: invariant ckN1 <= 17 + p2
	when  ckN1 >= 76 - p13  sync snd_req12 do {} goto node1_N1snt_req;
	when True sync rec_req21 do {} goto node1_N1rec_req_fast;

loc node1_N1child: invariant ckN1 >= 0 - p10

loc node1_N1almost_root: invariant ckN1 <= 0 + p7
	when True sync root1 do {} goto node1_N1root;
end 



(************************************************************)
automaton node2
(************************************************************)
synclabs : rec_req12, root2, child2, rec_idle12, rec_ack12, snd_req21, snd_ack21, snd_idle21;

loc node2_N2child: invariant ckN2 >= 0 - p16

loc node2_N2rec_req_slow: invariant ckN2 <= 167 + p19
	when True sync rec_idle12 do {} goto node2_N2rec_idle_slow;
	when  ckN2 >= 159 - p27  sync snd_ack21 do {ckN2 := 0} goto node2_N2almost_root;

loc node2_N2rec_idle_fast: invariant ckN2 <= 17 + p23
	when  ckN2 >= 76 - p28  sync snd_req21 do {} goto node2_N2snt_req;
	when True sync rec_req12 do {} goto node2_N2rec_req_fast;

loc node2_N2almost_child: invariant ckN2 <= 0 + p15
	when True sync child2 do {} goto node2_N2child;

loc node2_N2snt_req: invariant ckN2 >= 0 - p25
	when True sync rec_ack12 do {ckN2 := 0} goto node2_N2almost_child;
	when True sync rec_req12 do {ckN2 := 0} goto node2_N2root_contention;

loc node2_N2rec_idle_slow: invariant ckN2 <= 34 + p24
	when  ckN2 >= 159 - p29  sync snd_req21 do {} goto node2_N2snt_req;
	when True sync rec_req12 do {} goto node2_N2rec_req_slow;

loc node2_N2rec_req_fast: invariant ckN2 <= 85 + p18
	when True sync rec_idle12 do {} goto node2_N2rec_idle_fast;
	when  ckN2 >= 137 - p26  sync snd_ack21 do {ckN2 := 0} goto node2_N2almost_root;

loc node2_N2root_contention: invariant ckN2 <= 0 + p17
	when True sync snd_idle21 do {ckN2 := 0} goto node2_N2rec_req_slow;
	when True sync rec_idle12 do {ckN2 := 0} goto node2_N2rec_idle;
	when True sync snd_idle21 do {ckN2 := 0} goto node2_N2rec_req_fast;

loc node2_N2root: invariant ckN2 >= 0 - p21

loc node2_N2rec_idle: invariant ckN2 <= 0 + p22
	when True sync rec_req12 do {ckN2 := 0} goto node2_N2root_contention;
	when True sync snd_idle21 do {ckN2 := 0} goto node2_N2rec_idle_fast;
	when True sync snd_idle21 do {ckN2 := 0} goto node2_N2rec_idle_slow;

loc node2_N2almost_root: invariant ckN2 <= 0 + p20
	when True sync root2 do {} goto node2_N2root;
end 

(************************************************************)
automaton wire12
(************************************************************)
synclabs : snd_req12, rec_ack12, snd_ack12, snd_idle12, rec_req12, rec_idle12;

loc wire12_W12rec_req_idle: invariant ckW12x <= 30 + p30
	when True sync rec_req12 do {} goto wire12_W12rec_idle;
	when True sync snd_idle12 do {} goto wire12_W12rec_req_idle;

loc wire12_W12empty: invariant True
	when True sync snd_idle12 do {ckW12x := 0, ckW12y := 0} goto wire12_W12rec_idle;
	when True sync snd_req12 do {ckW12x := 0, ckW12y := 0} goto wire12_W12rec_req;
	when True sync snd_ack12 do {ckW12x := 0, ckW12y := 0} goto wire12_W12rec_ack;

loc wire12_W12rec_ack_req: invariant ckW12x <= 30 + p31
	when True sync rec_ack12 do {} goto wire12_W12rec_req;
	when True sync snd_req12 do {} goto wire12_W12rec_ack_req;

loc wire12_W12rec_idle_ack: invariant ckW12x <= 30 + p33
	when True sync snd_ack12 do {} goto wire12_W12rec_idle_ack;
	when True sync rec_idle12 do {} goto wire12_W12rec_ack;

loc wire12_W12rec_req_ack: invariant ckW12x <= 30 + p32
	when True sync rec_req12 do {} goto wire12_W12rec_ack;
	when True sync snd_ack12 do {} goto wire12_W12rec_req_ack;

loc wire12_W12rec_idle_req: invariant ckW12x <= 6 + p37
	when True sync snd_req12 do {} goto wire12_W12rec_idle_req;
	when True sync rec_idle12 do {} goto wire12_W12rec_req;

loc wire12_W12rec_idle: invariant ckW12y <= 6 + p36
	when True sync snd_idle12 do {} goto wire12_W12rec_idle;
	when True sync snd_ack12 do {ckW12y := 0} goto wire12_W12rec_idle_ack;
	when True sync snd_req12 do {ckW12y := 0} goto wire12_W12rec_idle_req;
	when True sync rec_idle12 do {} goto wire12_W12empty;

loc wire12_W12rec_ack: invariant ckW12y <= 30 + p34
	when True sync rec_ack12 do {} goto wire12_W12empty;
	when True sync snd_idle12 do {ckW12y := 0} goto wire12_W12rec_ack_idle;
	when True sync snd_ack12 do {} goto wire12_W12rec_ack;
	when True sync snd_req12 do {ckW12y := 0} goto wire12_W12rec_ack_req;

loc wire12_W12rec_req: invariant ckW12y <= 30 + p35
	when True sync rec_req12 do {} goto wire12_W12empty;
	when True sync snd_idle12 do {ckW12y := 0} goto wire12_W12rec_req_idle;
	when True sync snd_req12 do {} goto wire12_W12rec_req;
	when True sync snd_ack12 do {ckW12y := 0} goto wire12_W12rec_req_ack;

loc wire12_W12rec_ack_idle: invariant ckW12x <= 30 + p38
	when True sync rec_ack12 do {} goto wire12_W12rec_idle;
	when True sync snd_idle12 do {} goto wire12_W12rec_ack_idle;
end 


(************************************************************)
automaton wire21
(************************************************************)
synclabs : snd_ack21, snd_req21, rec_idle21, rec_req21, rec_ack21, snd_idle21;

loc wire21_W21rec_req_ack: invariant ckW21x <= 30 + p41
	when True sync rec_req21 do {} goto wire21_W21rec_ack;
	when True sync snd_ack21 do {} goto wire21_W21rec_req_ack;

loc wire21_W21rec_ack_req: invariant ckW21x <= 6 + p42
	when True sync rec_ack21 do {} goto wire21_W21rec_req;
	when True sync snd_req21 do {} goto wire21_W21rec_ack_req;

loc wire21_W21rec_idle_ack: invariant ckW21x <= 6 + p40
	when True sync snd_ack21 do {} goto wire21_W21rec_idle_ack;
	when True sync rec_idle21 do {} goto wire21_W21rec_ack;

loc wire21_W21rec_req_idle: invariant ckW21x <= 30 + p39
	when True sync rec_req21 do {} goto wire21_W21rec_idle;
	when True sync snd_idle21 do {} goto wire21_W21rec_req_idle;

loc wire21_W21rec_idle_req: invariant ckW21x <= 30 + p44
	when True sync snd_req21 do {} goto wire21_W21rec_idle_req;
	when True sync rec_idle21 do {} goto wire21_W21rec_req;

loc wire21_W21rec_idle: invariant ckW21y <= 30 + p45
	when True sync snd_idle21 do {} goto wire21_W21rec_idle;
	when True sync snd_ack21 do {ckW21y := 0} goto wire21_W21rec_idle_ack;
	when True sync snd_req21 do {ckW21y := 0} goto wire21_W21rec_idle_req;
	when True sync rec_idle21 do {} goto wire21_W21empty;

loc wire21_W21rec_ack: invariant ckW21y <= 30 + p47
	when True sync rec_ack21 do {} goto wire21_W21empty;
	when True sync snd_idle21 do {ckW21y := 0} goto wire21_W21rec_ack_idle;
	when True sync snd_ack21 do {} goto wire21_W21rec_ack;
	when True sync snd_req21 do {ckW21y := 0} goto wire21_W21rec_ack_req;

loc wire21_W21empty: invariant True
	when True sync snd_idle21 do {ckW21x := 0, ckW21y := 0} goto wire21_W21rec_idle;
	when True sync snd_req21 do {ckW21x := 0, ckW21y := 0} goto wire21_W21rec_req;
	when True sync snd_ack21 do {ckW21x := 0, ckW21y := 0} goto wire21_W21rec_ack;

loc wire21_W21rec_req: invariant ckW21y <= 6 + p46
	when True sync rec_req21 do {} goto wire21_W21empty;
	when True sync snd_idle21 do {ckW21y := 0} goto wire21_W21rec_req_idle;
	when True sync snd_req21 do {} goto wire21_W21rec_req;
	when True sync snd_ack21 do {ckW21y := 0} goto wire21_W21rec_req_ack;

loc wire21_W21rec_ack_idle: invariant ckW21x <= 30 + p43
	when True sync rec_ack21 do {} goto wire21_W21rec_idle;
	when True sync snd_idle21 do {} goto wire21_W21rec_ack_idle;
end 



(************************************************************)
  automaton s1o -- Safety 1 Observer
(************************************************************)

synclabs : root1, child2, child1, root2;

loc s1o_S1oStart: invariant True
	when True sync root2 do {} goto s1o_S1o4;
	when True sync child2 do {} goto s1o_S1o3;
	when True sync child1 do {} goto s1o_S1o2;
	when True sync root1 do {} goto s1o_S1o1;

loc s1o_S1oEnd: invariant True

loc s1o_S1o4: invariant True
	when True sync child1 do {} goto s1o_S1oEnd;

loc s1o_S1o3: invariant True
	when True sync root1 do {} goto s1o_S1oEnd;

loc s1o_S1o2: invariant True
	when True sync root2 do {} goto s1o_S1oEnd;

loc s1o_S1o1: invariant True
	when True sync child2 do {} goto s1o_S1oEnd;
end 



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[node1]  = node1_N1root_contention
	& loc[node2]  = node2_N2root_contention
	& loc[wire12] = wire12_W12empty
	& loc[wire21] = wire21_W21empty
	& loc[s1o]    = s1o_S1oStart

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& ckN1 = 0
	& ckN2 = 0
	& ckW12x = 0
	& ckW12y = 0
	& ckW21x = 0
	& ckW21y = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& delay >= 0 
	& rc_fast_min >= 0
	& rc_fast_max >= 0
	& rc_slow_max >= 0
	& rc_slow_min >= 0
	& p0 >= 0
	& p1 >= 0
	& p2 >= 0
	& p3 >= 0
	& p4 >= 0
	& p5 >= 0
	& p6 >= 0
	& p7 >= 0
	& p8 >= 0
	& p9 >= 0
	& p10 >= 0
	& p11 >= 0
	& p12 >= 0
	& p13 >= 0
	& p14 >= 0
	& p15 >= 0
	& p16 >= 0
	& p17 >= 0
	& p18 >= 0
	& p19 >= 0
	& p20 >= 0
	& p21 >= 0
	& p22 >= 0
	& p23 >= 0
	& p24 >= 0
	& p25 >= 0
	& p26 >= 0
	& p27 >= 0
	& p28 >= 0
	& p29 >= 0
	& p30 >= 0
	& p31 >= 0
	& p32 >= 0
	& p33 >= 0
	& p34 >= 0
	& p35 >= 0
	& p36 >= 0
	& p37 >= 0
	& p38 >= 0
	& p39 >= 0
	& p40 >= 0
	& p41 >= 0
	& p42 >= 0
	& p43 >= 0
	& p44 >= 0
	& p45 >= 0
	& p46 >= 0
	& p47 >= 0

	

	(*------------------------------------------------------------*)
	(* Old parameter constraints *)
	(*------------------------------------------------------------*)
-- 	& rc_fast_max	= 85 -- 76 .. 100 (* 85 *)
-- 	& rc_fast_min	= 76
-- 	& rc_slow_max	= 159 .. 200 (* 167 *)
-- 	& rc_slow_min	= 159
-- 	& delay		= 30
	
-- 	& rc_fast_max <= 100
-- 	& rc_slow_max <= 200

	----------------------
	-- Constraint output by IMITATOR 1
	----------------------
--       & 2delay + rc_fast_max < rc_slow_min
--       & rc_slow_min <= rc_slow_max
--       & 2delay < rc_fast_min
--       & 0 <= delay
--       & rc_fast_min <= rc_fast_max
;


(************************************************************)
(* The end *)
(************************************************************)
end
